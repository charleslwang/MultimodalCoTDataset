{
    "problem_text": "In \\odot P, m \\widehat E N = 66 and m \\angle G P M = 89. Find m \\angle G M E.",
    "choices": [
        "57",
        "66",
        "89",
        "155"
    ],
    "answer": "A",
    "detailed_solution": " ",
    "problem_type_graph": [
        "Circle"
    ],
    "problem_type_goal": [
        "Angle"
    ],
    "source": "textbook2_chapter10.pdf page 49",
    "comment": "",
    "id": 1053,
    "annot_id": "Ran_2020-03-29_04_55_33",
    "is_standard": false,
    "compact_choices": [
        "57",
        "66",
        "89",
        "155"
    ],
    "precise_value": [
        57.0,
        66.0,
        89.0,
        155.0
    ],
    "rough_value": [
        57,
        66,
        89,
        155
    ],
    "compact_text": "In \\odot P, m \\widehat EN = 66 and m \\angle GPM = 89. Find m \\angle GME.",
    "annotat_text": "In $\\odot P, m \\widehat{E N}=66$ and $m \\angle G P M=89$ . \r\nFind $m \\angle G M E$",
    "unit": "",
    "img_width": 321,
    "img_height": 260,
    "data_type": "train",
    "date": "Fri Sep 18 22:23:14 2020",
    "system": "linux",
    "logic_form": {
        "text_logic_form": [
            "Circle(P)",
            "Equals(MeasureOf(Arc(E,N)),66)",
            "Equals(MeasureOf(Angle(G,P,M)),89)",
            "Find(MeasureOf(Angle(G,M,E)))"
        ],
        "dissolved_text_logic_form": [
            "Circle(P)",
            "Equals(MeasureOf(Arc(E,N)),66)",
            "Equals(MeasureOf(Angle(G,P,M)),89)",
            "Find(MeasureOf(Angle(G,M,E)))"
        ],
        "diagram_logic_form": [
            "PointLiesOnLine(B, Line(M, E))",
            "PointLiesOnLine(B, Line(N, P))",
            "PointLiesOnLine(P, Line(N, G))",
            "PointLiesOnLine(B, Line(N, G))",
            "PointLiesOnLine(P, Line(G, B))",
            "PointLiesOnCircle(M, Circle(P, radius_4_0))",
            "PointLiesOnCircle(E, Circle(P, radius_4_0))",
            "PointLiesOnCircle(N, Circle(P, radius_4_0))",
            "PointLiesOnCircle(G, Circle(P, radius_4_0))"
        ],
        "line_instances": [
            "EB",
            "EG",
            "EN",
            "GB",
            "MB",
            "ME",
            "MG",
            "MN",
            "MP",
            "NB",
            "NG",
            "NP",
            "PB",
            "PG"
        ],
        "point_positions": {
            "B": [
                117.0,
                110.0
            ],
            "E": [
                186.0,
                45.0
            ],
            "G": [
                18.0,
                46.0
            ],
            "M": [
                41.0,
                183.0
            ],
            "N": [
                186.0,
                155.0
            ],
            "P": [
                103.0,
                100.0
            ]
        },
        "circle_instances": [
            "P"
        ]
    },
    "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the points\npoints = {\n    \"B\": [117.0, 110.0],\n    \"E\": [186.0, 45.0],\n    \"G\": [18.0, 46.0],\n    \"M\": [41.0, 183.0],\n    \"N\": [186.0, 155.0],\n    \"P\": [103.0, 100.0]\n}\n\n# Define the lines\nlines = [\n    (\"E\", \"B\"), (\"E\", \"G\"), (\"E\", \"N\"),\n    (\"G\", \"B\"), (\"M\", \"B\"), (\"M\", \"E\"),\n    (\"M\", \"G\"), (\"M\", \"N\"), (\"M\", \"P\"),\n    (\"N\", \"B\"), (\"N\", \"G\"), (\"N\", \"P\"),\n    (\"P\", \"B\"), (\"P\", \"G\")\n]\n\n# Calculate the radius for the circle at P\ncircle_center = np.array(points[\"P\"])\nradius = max(np.linalg.norm(np.array(points[p]) - circle_center) for p in [\"M\", \"E\", \"N\", \"G\"])\n\n# Create the plot\nfig, ax = plt.subplots()\n\n# Draw the lines\nfor line in lines:\n    p1, p2 = line\n    x_values, y_values = zip(points[p1], points[p2])\n    ax.plot(x_values, y_values, 'k-')  # Black line\n\n# Draw the circle\ncircle = plt.Circle(circle_center, radius, color='b', fill=False)\nax.add_artist(circle)\n\n# Plot the points and labels\nfor label, (x, y) in points.items():\n    ax.plot(x, y, 'ro')  # Red point\n    ax.text(x, y, ' ' + label, fontsize=20, color='red', verticalalignment='center', horizontalalignment='left')\n\n# Set the limits\nlimit = 1.5 * radius\nax.set_xlim(circle_center[0] - limit, circle_center[0] + limit)\nax.set_ylim(circle_center[1] - limit, circle_center[1] + limit)\n\n# Set equal scaling and remove background\nax.set_aspect('equal')\nax.axis('off')\n\n# Show the plot\nplt.show()\n",
    "image_path_code": "/fsx-onellm/swj0419/sketchpad/sketchpad/GPT4API/notebook_testing/ff87f7848a3249608d2b8e6eb644018d.png"
}