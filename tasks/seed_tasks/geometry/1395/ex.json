{
    "problem_text": "Find m \\angle M.",
    "choices": [
        "20",
        "30",
        "60",
        "120"
    ],
    "answer": "B",
    "detailed_solution": " ",
    "problem_type_graph": [
        "Triangle"
    ],
    "problem_type_goal": [
        "Angle"
    ],
    "source": "textbook1_chapter_4.pdf",
    "comment": "",
    "id": 1395,
    "annot_id": "Shibiao_2020-03-21_14_42_33",
    "is_standard": false,
    "compact_choices": [
        "20",
        "30",
        "60",
        "120"
    ],
    "precise_value": [
        20.0,
        30.0,
        60.0,
        120.0
    ],
    "rough_value": [
        20,
        30,
        60,
        120
    ],
    "compact_text": "Find m \\angle M.",
    "annotat_text": "Find $m \\angle M$.",
    "unit": "",
    "img_width": 761,
    "img_height": 403,
    "data_type": "train",
    "date": "Fri Sep 18 22:23:14 2020",
    "system": "linux",
    "logic_form": {
        "text_logic_form": [
            "Find(MeasureOf(Angle(M)))"
        ],
        "dissolved_text_logic_form": [
            "Find(MeasureOf(Angle(M)))"
        ],
        "diagram_logic_form": [
            "Equals(LengthOf(Line(N, M)), 11)",
            "Equals(MeasureOf(Angle(P, N, M)), 120)",
            "Equals(MeasureOf(Angle(N, P, M)), MeasureOf(Angle(N, M, P)))"
        ],
        "line_instances": [
            "MP",
            "NM",
            "NP"
        ],
        "point_positions": {
            "M": [
                510.0,
                4.0
            ],
            "N": [
                289.0,
                206.0
            ],
            "P": [
                5.0,
                115.0
            ]
        },
        "circle_instances": [
            ""
        ]
    },
    "code": "import matplotlib.pyplot as plt\n\n# Define coordinates\npoints = {\"M\": [510.0, 4.0], \"N\": [289.0, 206.0], \"P\": [5.0, 115.0]}\n\n# Create a figure and axis with equal aspect\nfig, ax = plt.subplots()\nax.set_aspect('equal')\n\n# Plotting the lines\nlines = [(\"M\", \"P\"), (\"N\", \"M\"), (\"N\", \"P\")]\nfor line in lines:\n    x_values = [points[line[0]][0], points[line[1]][0]]\n    y_values = [points[line[0]][1], points[line[1]][1]]\n    ax.plot(x_values, y_values, 'k-')  # 'k-' for black line\n\n# Annotating the points\nfor label, coord in points.items():\n    ax.text(coord[0] + 10, coord[1], label, color='red', fontsize=20)  # Adjusted to prevent overlap\n\n# Settings for the plot\nax.axis('off')\nplt.xlim(-50, 600)  # Set limits larger than the largest coordinate\nplt.ylim(-50, 300)\n\n# Show the plot\nplt.show()\n",
    "image_path_code": "/fsx-onellm/swj0419/sketchpad/sketchpad/GPT4API/notebook_testing/3d512cb9c6514ce3a5a394b12a6f2545.png"
}